/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/drawing.js":
/*!************************!*\
  !*** ./src/drawing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ERASE_MODE: () => (/* binding */ ERASE_MODE),\n/* harmony export */   Gallery: () => (/* binding */ Gallery),\n/* harmony export */   PENCIL_MODE: () => (/* binding */ PENCIL_MODE)\n/* harmony export */ });\nclass Gallery extends EventTarget {\n    constructor(container, controls) {\n        super();\n        this.container = container;\n        this.controls = controls;\n        this.map = new Map();\n    }\n    add(player, addControls=false) {\n        if (!this.map.contains(player)) {\n            let newCanvasElement = document.createElement(\"canvas\");\n            this.map.set(player, new Canvas(newCanvasElement, this.controls, addControls));\n            newCanvasElement.classList = \"image\";\n            this.container.appendChild(newCanvasElement);\n            this.dispatchEvent(new CustomEvent(\"change\", {detail: {added: player}}));\n        }\n        return this.map.get(player);\n    }\n    get(player) {\n        return this.map.get(player);\n    }\n    clear() {\n        for (var canvas of this.map.values()) {\n            canvas.clearCanvas();\n        }\n    }\n}\n\nconst PENCIL_MODE = \"source-over\";\nconst ERASE_MODE = \"destination-out;\"\nclass Canvas extends EventTarget {\n    constructor(canvas_element, controls_element, add_controls=false) {\n        super();\n        this.strokes = new Array();\n        this.canvas_element = canvas_element;\n        this.context = this.canvas_element.getContext(\"2d\");\n        this.controls_element = controls_element;\n\n        this.paint = false;\n        this.color = \"#000000\";\n        this.size = 5;\n        this.traceback = 0;\n\n        this.mode = PENCIL_MODE;\n\n\n        this.canvas_element.ontouchstart = this.canvas_element.onmousedown = e => this.onTouch(e);\n        this.canvas_element.ontouchmove = this.canvas_element.onmousemove = e => this.onUntouch(e);\n        this.canvas_element.ontouchend = this.canvas_element.onmouseleave = this.canvas_element.onmouseup = e => {\n            this.redraw();\n            this.paint = false;\n            this.dispatchEvent(new CustomEvent(\"stroke\"));\n        };\n\n        if (add_controls) {\n            this.controls = {\n                color: document.createElement(\"input\"),\n                stroke: document.createElement(\"input\"),\n                erase: document.createElement(\"button\"),\n                pencil: document.createElement(\"button\"),\n                undo: document.createElement(\"button\")\n            };\n\n            this.controls.color.type = \"color\";\n            this.controls.color.classList.add(\"colorpicker\");\n            this.controls.stroke.type = \"range\";\n            this.controls.stroke.value = \"5\";\n            this.controls.stroke.min = \"1\";\n            this.controls.stroke.max = \"50\";\n            this.controls.stroke.classList.add(\"sizepicker\");\n            this.controls.erase.classList.add(\"erasebutton\");\n            this.controls.erase.innerHTML = \"Erase\";\n            this.controls.pencil.classList.add(\"pencilbutton\");\n            this.controls.pencil.innerHTML = \"Draw\";\n            this.controls.undo.classList.add(\"undobutton\");\n            this.controls.undo.innerHTML = \"Undo\";\n\n\n            controls_element.appendChild(document.createTextNode(\"Color: \"));\n            controls_element.appendChild(this.controls.color);\n            controls_element.appendChild(document.createTextNode(\"Stroke: \"));\n            controls_element.appendChild(this.controls.stroke);\n            controls_element.appendChild(this.controls.erase);\n            controls_element.appendChild(this.controls.pencil);\n            controls_element.appendChild(this.controls.undo);\n            this.controls.color.onchange = e => {\n                this.mode = PENCIL_MODE;\n                this.color = e.target.value;\n            };\n            this.controls.stroke.onchange = e => {\n                this.size = e.target.value;\n            };\n            this.controls.undo.onclick = e => this.undo(e);\n            this.controls.pencil.onclick = e => this.pencil(e);\n            this.controls.erase.onclick = e => this.erase(e);\n        }\n    }\n\n    getStrokes() {\n        return this.strokes;\n    }\n\n    clearCanvas() {\n        this.strokes.length = 0;\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this.dispatchEvent(new CustomEvent(\"change\"));\n    }\n\n    getCanvas() {\n        return this.canvas_element;\n    }\n\n    redraw() {\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this.context.lineJoin = \"round\";\n\n        for (var i = 0; i < this.strokes.length; i++) {\n            this.context.strokeStyle = this.strokes[i][\"c\"];\n            this.context.lineWidth = this.strokes[i][\"s\"];\n            this.context.globalCompositeOperation = this.strokes[i][\"m\"];\n            this.context.beginPath();\n            if (this.strokes[i][\"d\"] && i) {\n                this.context.moveTo(this.strokes[i - 1][\"x\"] * this.context.canvas.width / 1000, this.strokes[i - 1][\"y\"] * this.context.canvas.height / 1000);\n            } else {\n                this.context.moveTo(this.strokes[i][\"x\"] * this.context.canvas.width / 1000 - 1, this.strokes[i][\"y\"] * this.context.canvas.height / 1000);\n            }\n            this.context.lineTo(this.strokes[i][\"x\"] * this.context.canvas.width / 1000, this.strokes[i][\"y\"] * this.context.canvas.height / 1000);\n            this.context.closePath();\n            this.context.stroke();\n        }\n        this.dispatchEvent(new CustomEvent(\"redraw\"));\n    }\n\n    setSize() {\n        let oh = this.controls_element ? this.controls_element.offsetHeight * 1.5 : 0;\n        let mw = window.innerHeight - oh - this.canvas_element.getBoundingClientRect().top;\n\n        this.canvas_element.style.width = mw;\n        this.canvas_element.style.height = mw;\n        this.canvas_element.setAttribute('width', mw);\n        this.canvas_element.setAttribute('height', mw);\n\n        this.redraw();\n    }\n\n    onTouch(e) {\n        e.preventDefault();\n\n        this.traceback = 0;\n        this.paint = true;\n        var border = getComputedStyle(e.target).getPropertyValue('border-left-width');\n        border = parseInt(border);\n        var touches = e.changedTouches;\n        if (touches) {\n            this.addClick((touches[0].pageX - e.target.offsetLeft - border) / this.context.canvas.width * 1000,\n                (touches[0].pageY - e.target.offsetTop - border) / this.context.canvas.height * 1000,\n                this.color,\n                this.size,\n                this.mode);\n        } else {\n            this.addClick((e.pageX - e.target.offsetLeft - border) / this.context.canvas.width * 1000,\n                (e.pageY - e.target.offsetTop - border) / this.context.canvas.height * 1000,\n                this.color,\n                this.size,\n                this.mode);\n        }\n        this.redraw();\n    }\n\n    onUntouch(e) {\n        e.preventDefault();\n        if (this.paint) {\n            var b = getComputedStyle(e.target).getPropertyValue('border-left-width');\n            b = parseInt(b);\n            var touches = e.changedTouches;\n            if (touches) {\n                this.addClick((touches[0].pageX - e.target.offsetLeft - b) / this.context.canvas.width * 1000,\n                    (touches[0].pageY - e.target.offsetTop - b) / this.context.canvas.height * 1000,\n                    this.color,\n                    this.size,\n                    this.mode,\n                    true);\n            } else {\n                this.addClick((e.pageX - e.target.offsetLeft - b) / this.context.canvas.width * 1000,\n                    (e.pageY - e.target.offsetTop - b) / this.context.canvas.height * 1000,\n                    this.color,\n                    this.size,\n                    this.mode,\n                    true);\n            }\n            this.redraw();\n        }\n    }\n\n    pencil() {\n        this.mode = PENCIL_MODE;\n        this.dispatchEvent(new CustomEvent(\"pencil\"));\n    }\n\n    erase() {\n        this.color = \"rgba(0,0,0,1)\";\n        this.mode = ERASE_MODE;\n        this.dispatchEvent(new CustomEvent(\"erase\"));\n    }\n\n    undo() {\n        if (this.strokes.length > 0) {\n            this.strokes = this.strokes.slice(0, this.strokes[this.strokes.length - 1][\"t\"]);\n            this.redraw();\n            this.dispatchEvent(new CustomEvent(\"undo\", { detail: { newlength: this.strokes.length } }));\n        }\n        return this.strokes.length;\n    }\n\n    addClick(x, y, c, s, m, dragging) {\n        this.strokes.push({\n            \"x\": x,\n            \"y\": y,\n            \"c\": c,\n            \"s\": s,\n            \"m\": m,\n            \"d\": dragging,\n            \"t\": --this.traceback\n        });\n        this.dispatchEvent(new CustomEvent(\"change\"));\n    }\n\n    load(strks) {\n        this.strokes = strks.map(x => JSON.parse(x));\n        this.dispatchEvent(new CustomEvent(\"change\"));\n    }\n\n    add(image) {\n        this.strokes = this.strokes.concat(image.map(x => JSON.parse(x)));\n        this.dispatchEvent(new CustomEvent(\"change\"));\n    }\n\n    hide() {\n        if (this.canvas_element.style.display != \"none\") {\n            this.old_display = this.canvas_element.style.display;\n        }\n        this.canvas_element.style.display = \"none\";\n        this.dispatchEvent(new CustomEvent(\"hidden\"));\n    }\n\n    show() {\n        this.canvas_element.style.display = this.old_display || \"block\";\n        this.dispatchEvent(new CustomEvent(\"shown\"));\n    }\n}\n\n\n//# sourceURL=webpack:///./src/drawing.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _drawing_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawing.js */ \"./src/drawing.js\");\n/* harmony import */ var _userlist_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./userlist.js */ \"./src/userlist.js\");\n/* harmony import */ var _pages_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages.js */ \"./src/pages.js\");\n\n\n\n\nfunction onload_billiards() {\n\n    var gName = null;\n    var socket = null;\n    var gAssign = null;\n    var gState = null;\n    var lastStroke = 0;\n    var repull = true;\n    var gameover = false;\n    var gMyGuessers = null;\n    var gMyGuesses = null;\n    const gallery = new _drawing_js__WEBPACK_IMPORTED_MODULE_0__.Gallery(document.getElementById(\"gallery\"), document.getElementById(\"controls\"));\n    const lobby = new _userlist_js__WEBPACK_IMPORTED_MODULE_1__.UserList(document.getElementById(\"user-list-2\"));\n    const pages = new _pages_js__WEBPACK_IMPORTED_MODULE_2__.Pages();\n    pages.addPage(\"running\", document.getElementById(\"progress-container\"), \"flex\");\n    pages.addPage(\"lobby\", document.getElementById(\"lobby-container\"));\n    pages.addPage(\"endgame\", document.getElementById(\"endgame-container\"));\n    pages.goTo(\"lobby\");\n\n\n    function reset() {\n        gMyGuessers = new Map();\n        gMyGuesses = new Map();\n        gAssign = null;\n        gState = null;\n        lastStroke = 0;\n        repull = false;\n        gameover = false;\n        lobby.clear();\n        ingamenames.clear();\n        endgamenames.clear();\n        gallery.clear();\n    }\n\n    function tick(state) {\n        gState = state;\n        let timer = document.getElementById(\"timer\");\n        if (state[\"state\"] == \"RUNNING\") {\n            pages.goTo(\"running\");\n            lobby.setContainer(document.getElementById(\"user-list-1\"));\n            timer.style.display = \"block\";\n            timer.value = state[\"time\"];\n            timer.max = state[\"timelimit\"];\n            canvas.setSize();\n        } else if (state[\"state\"] == \"LOBBY\") {\n            gameover = false;\n            pages.goTo(\"lobby\");\n            lobby.setContainer(document.getElementById(\"user-list-2\"));\n            timer.style.display = \"none\";\n        } else if (state[\"state\"] == \"POSTGAME\") {\n            pages.goTo(\"endgame\");\n            lobby.setContainer(document.getElementById(\"user-list-3\"));\n            timer.style.display = \"none\";\n            show_winners();\n        }\n        if (gName == state[\"host\"]) {\n            document.getElementById(\"start\").style.display = \"block\";\n            document.getElementById(\"restart\").style.display = \"block\";\n        }\n    }\n\n    function show_winners() {\n        if (gameover) {\n            return;\n        }\n        gameover = true;\n        let namelist = document.getElementById(\"user-list-3\");\n        let values = Object.entries(gState[\"players\"]);\n        let highscore = Math.max(...values.map(x => x[1].score));\n        for (let i = 0; i < values.length; ++i) {\n            setTimeout(function () {\n                let player = values[i][0];\n                let child = add_player(player);\n                child.style.width = \"10%\";\n                namelist.appendChild(child);\n                try {\n                    let image = document.createElement(\"div\");\n                    image.classList = \"finalimagecontainer\";\n                    let picture = document.createElement(\"img\");\n                    let can = gMap.get(player);\n                    if (can) {\n                        can.redraw();\n                        picture.src = can.getCanvas().toDataURL();\n                    }\n                    image.onclick = function() {\n                        picture.src = gMap.get(player).getCanvas().toDataURL();\n                        Array.prototype.forEach.call(document.getElementsByClassName(\"finalimagecontainer\"), d=>d.style.display = \"none\");\n                    };\n                    image.appendChild(picture);\n                    document.getElementById(\"finalgallery\").appendChild(image);\n                    gImgMap.set(player, image);\n                } catch (e) {console.log(e)}\n                child.textContent = player + \" [0]\";\n                if (gState[\"players\"][player][\"score\"] == highscore) {\n                    child.setAttribute(\"winner\", \"true\");\n                }\n                child.setAttribute(\"moving\", \"true\");\n                setTimeout(function () {\n                    child.style.width = (10 + (gState[\"players\"][player][\"score\"] * 80 / highscore)) + \"%\";\n                    var tally = 0;\n                    var myInterval = setInterval(function () {\n                        tally += Math.ceil(gState[\"players\"][player][\"score\"] / 80);\n                        if (tally >= gState[\"players\"][player][\"score\"]) {\n                            tally = gState[\"players\"][player][\"score\"];\n                            clearInterval(myInterval);\n                        }\n                        child.textContent = player + \" [\" + tally + \"]\";\n                    }, 16);\n                    setTimeout(function () {\n                        child.setAttribute(\"moving\", \"false\");\n                    }, 500);\n                }, 1000);\n            }, i * 3000);\n        }\n    }\n\n    function player_click(e) {\n        if (gState[\"state\"] == \"RUNNING\") {\n            for (let p of gMap.values()) {\n                console.log(p);\n                p.hide();\n            }\n            for (let p of gMapLobby.values()) {\n                p.setAttribute(\"selected\", \"false\");\n            }\n            let can = gMap.get(e.target.getAttribute(\"__player\"));\n            can.show();\n            can.setSize();\n            can.redraw();\n            canvas.redraw();\n            gMapLobby.get(e.target.getAttribute(\"__player\")).setAttribute(\"selected\", \"true\");\n        } else if (gState[\"state\"] == \"POSTGAME\") {\n            gImgMap.get(e.target.getAttribute(\"__player\")).style.display = \"block\";\n            gImgMap.get(e.target.getAttribute(\"__player\")).querySelector(\"img\").style.display = \"block\";\n        }\n    }\n\n    function cycle(_backwards) {\n        if (gState[\"state\"] == \"RUNNING\") {\n            let e = document.querySelector(\".user-list-item[selected=\\\"true\\\"] + li\") || document.querySelector(\"li.user-list-item:nth-child(1)\");\n            console.log(e);\n            for (let p of gMap.values()) {\n                p.hide();\n            }\n            for (let p of gMapLobby.values()) {\n                p.setAttribute(\"selected\", \"false\");\n            }\n            let can = gMap.get(e.getAttribute(\"__player\"));\n            can.show();\n            can.setSize();\n            can.redraw();\n            canvas.redraw();\n            gMapLobby.get(e.getAttribute(\"__player\")).setAttribute(\"selected\", \"true\");\n        }\n    }\n\n    function current_view(e) {\n        for (e of document.getElementsByClassName(\"image\")) {\n            if (e.style.display != \"none\") {\n                return e;\n            }\n        }\n    }\n\n    function start() {\n        socket.send(JSON.stringify({ \"Start\": {} }));\n    }\n\n    function restart() {\n        socket.send(JSON.stringify({ \"Restart\": {} }));\n    }\n\n    function sendAssign() {\n        socket.send(JSON.stringify({ \"Assign\": {} }));\n    }\n\n    function sendGuess(g) {\n        socket.send(JSON.stringify({ \"Guess\": { \"guess\": g } }));\n    }\n\n    function sendDrawing() {\n        let strokes = canvas.getStrokes();\n        var data = strokes.slice(lastStroke).map(x => JSON.stringify(x));\n        lastStroke = strokes.length;\n        if (data.length > 0) {\n            socket.send(JSON.stringify({ \"Image\": { \"image\": data } }));\n        }\n    }\n    \n    function add_guesser(guesser) {\n        let a = add_player(guesser);\n        if (!gMyGuessers.has(guesser)) {\n            gMyGuessers.set(guesser, a);\n            a.setAttribute(\"movingguesser\", \"true\");\n            a.setAttribute(\"guesser\", \"true\");\n            setTimeout(function() {a.setAttribute(\"movingguesser\", \"false\");}, 1);\n        }\n    }\n\n    function add_guessed(drawer) {\n        let a = add_player(drawer);\n        if (!gMyGuesses.has(drawer)) {\n            gMyGuesses.set(drawer, a);\n            a.setAttribute(\"movingguessed\", \"true\");\n            a.setAttribute(\"guessed\", \"true\");\n            setTimeout(function() {a.setAttribute(\"movingguessed\", \"false\");}, 1);\n        }\n    }\n    function draw_event_handler(e) {\n        e.preventDefault();\n        sendDrawing();\n    }\n    document.getElementById(\"name\").onkeydown = function (e) {\n        if (e.key  == \"Enter\") {\n            gName = e.target.value;\n            document.getElementById(\"game\").style.display = \"block\";\n            document.getElementById(\"login\").style.display = \"none\";\n            connect();\n            document.cookie = gName;\n            canvas = gallery.add(gName, true);\n            canvas.addEventListener(\"stroke\", draw_event_handler);\n            canvas.addEventListener(\"undo\", e => {\n                lastStroke = canvas.getStrokes().length;\n                socket.send(JSON.stringify({ \"Undo\": { \"i\": e.detail.newlength } }));\n            });\n        }\n    };\n    document.getElementById(\"guess\").addEventListener(\"keydown\", function search(e) {\n        if (e.key  == \"Enter\") {\n            gName = e.target.value;\n            sendGuess(e.target.value);\n            e.target.value = \"\";\n        } else if (e.key  == \"Tab\") {\n            cycle(e.shiftKey);\n            e.preventDefault();\n        }\n    });\n\n    document.onmouseup = function () { document.getElementById(\"guess\").focus(); };\n\n    document.getElementById(\"start\").onclick = function search(e) {\n        start();\n    };\n    document.getElementById(\"restart\").onclick = function search(e) {\n        restart();\n    };\n    document.getElementById(\"progress-container\").style.display = \"none\";\n    document.getElementById(\"lobby-container\").style.display = \"none\";\n    document.getElementById(\"endgame-container\").style.display = \"none\";\n    if (document.cookie != \"\") {\n        document.getElementById(\"name\").value = document.cookie;\n    }\n    window.onresize = function () {\n        try {\n            see_element(current_view());\n            redraw_other(current_view().getContext(\"2d\"), gstrks);\n            redraw();\n        } catch { }\n    };\n    setInterval(function () {\n        if (gState && gState[\"state\"] == \"RUNNING\") {\n            let timer = document.getElementById(\"timer\");\n            timer.value += 1;\n        }\n    }, 1000);\n}\n\nwindow.onload = onload_billiards;\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/pages.js":
/*!**********************!*\
  !*** ./src/pages.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pages: () => (/* binding */ Pages)\n/* harmony export */ });\nclass Pages extends EventTarget {\n    constructor() {\n        super();\n        this.map = new Map();\n    }\n    addPage(name, page, style=\"block\") {\n        this.map.set(name, [page, style]);\n    }\n    goTo(name) {\n        for (let [key, value] of this.map) {\n            value[0].style.display = \"none\";\n        }\n        const [page, style] = this.map.get(name);\n        page.style.display = style;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/pages.js?");

/***/ }),

/***/ "./src/userlist.js":
/*!*************************!*\
  !*** ./src/userlist.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserList: () => (/* binding */ UserList),\n/* harmony export */   UserListItem: () => (/* binding */ UserListItem)\n/* harmony export */ });\nclass UserListItem {\n    constructor(player, parent) {\n        this.element = document.createElement('li');\n        this.element.textContent = player;\n        this.player = player;\n        this.parent = parent;\n        this.element.classList.add('user-list-item');\n        this.element.onclick = parent.onClickBind.bind(this);\n    }\n    set(text) {\n        if (text !== undefined) {\n            this.element.textContent = text;\n        } else {\n            this.element.textContent = this.player;\n        }\n    }\n}\nclass UserList extends EventTarget {\n    constructor(container, sortFn) {\n        super();\n        this.container = container;\n        this.order = [];\n        this.map = new Map();\n        this.sortFn = sortFn;\n        this.onClickBind = this.onClick.bind(this);\n    }\n    add(player) {\n        if (!this.map.contains(player)) {\n            this.map.set(player, new UserListItem(player, this));\n            this.dispatchEvent(new CustomEvent(\"change\", {detail: {added: player}}));\n            this.order.push(player);\n            this.sort();\n        }\n        return this.map.get(player);\n    }\n    get(player) {\n        return this.map.get(player);\n    }\n    onClick(target, e) {\n        this.dispatchEvent(new CustomEvent(\"click\", {detail: {event: e, target: target}}));\n    }\n    sort() {\n        this.order.sort(this.sortFn);\n        for (var player of this.order) {\n            this.container.appendChild(this.map.get(player));\n        }\n    }\n    setAttribute(player, property, value) {\n        const listItem = this.add(player);\n        listItem.setAttribute(property, value);\n    }\n    animateBool(player, property) {\n        const listItem = this.add(player);\n        listItem.setAttribute(property, \"true\");  \n        listItem.setAttribute(\"moving\"+property, \"true\");  \n        setTimeout(function() {listItem.setAttribute(\"moving\"+property, \"false\");}, 1);\n    }\n    clear() {\n        for (var player of this.map.values()) {\n            player.set();\n        }\n        this.container.innerHTML = \"\";\n    }\n    setContainer(container) {\n        this.clear();\n        this.container = container;\n        this.sort();\n    }\n}\n\n//# sourceURL=webpack:///./src/userlist.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;